import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, f1_score
import matplotlib.pyplot as plt

# 데이터 준비
features = df[['TOURS_wind_speed',	'TOURS_humidity',	'TOURS_pressure',	'TOURS_global_radiation',	'TOURS_precipitation']]
labels = pd.cut(df['TOURS_temp_mean'], bins=3, labels=[0, 1, 2])

# 데이터 분할
x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(len(features.columns),)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  # 출력층 (3개의 클래스에 대한 확률 분포를 출력)
])

# 모델 컴파일
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 모델 학습
history = model.fit(x_train, y_train, epochs=50, validation_data=(x_test, y_test), verbose=1)

# Loss 그래프
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

# Accuracy 그래프
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='train_accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# 모델 평가
y_pred = np.argmax(model.predict(x_test), axis=-1)

# F1-score 계산
f1 = f1_score(y_test, y_pred, average='weighted')
print(f'Weighted F1-score: {f1:.4f}')

# Classification Report 출력
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Confusion Matrix 출력
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))
